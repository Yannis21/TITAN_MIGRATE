//AB/ Project Standard Customer Listing WQL
//AB/ Object prj is a REPORT_Project
//AB/     Set ProjectName to "Standard Customer Listing WQL"
//AB/     Set ProjectFileName to "Stdcust.rv"

// Project Object Structure
//   StandCustWQLRpt is a ReportView
//     SortOrderGroup is a RadioGroup
//       NumberSortRadio is a Radio
//       NameSortRadio is a Radio
//       DescAscCheckBox is a CheckBox
//     NumberSelGroup is a Group
//       StartCustNumber is a Form
//       EndCustNumber is a Form
//     NameSelGroup is a Group
//       StartCustName is a Form
//       EndCustName is a Form
//     DestRadio is a RadioGroup
//       WindowRadio is a Radio
//       PrinterRadio is a Radio
//       FileRadio is a Radio
//       MailRadio is a Radio
//     FileTypeGroup is a Group
//       FileNameForm is a Form
//         New_dialog is a SaveAsdialog
//       TypeCombo is a ComboForm
//       ApplyExtCheckBox is a CheckBox
//     RunButton is a Button
//     CancelButton is a Button
//     CustWQLReport is a WinQLReport

// Register all objects
Register_Object ApplyExtCheckBox
Register_Object CancelButton
Register_Object CustWQLReport
Register_Object DescAscCheckBox
Register_Object DestRadio
Register_Object EndCustName
Register_Object EndCustNumber
Register_Object FileNameForm
Register_Object FileRadio
Register_Object FileTypeGroup
Register_Object MailRadio
Register_Object NameSelGroup
Register_Object NameSortRadio
Register_Object New_dialog
Register_Object NumberSelGroup
Register_Object NumberSortRadio
Register_Object PrinterRadio
Register_Object RunButton
Register_Object SortOrderGroup
Register_Object StandCustWQLRpt
Register_Object StartCustName
Register_Object StartCustNumber
Register_Object TypeCombo
Register_Object WindowRadio


//AB/ Report View


//AB-StoreTopStart
use dfallrpt
use Customer.dd
//AB-StoreTopEnd

//AB-IgnoreStart

Use DFAllEnt.pkg

//AB-IgnoreEnd

DEFERRED_VIEW Activate_StandCustWQLRpt FOR ;
;
Object StandCustWQLRpt is a ReportView

    //AB-StoreTopStart

    //***
    //*** This ReportView is a sample of the use of WinQL32.pkg. This package
    //*** allows a connection to WinQL by calling the crpe.dll functions directly.
    //*** It is based on WinQL 4.5. The sample shows a simple report on which the
    //*** user can aplly the following actions:
    //***   - Adjust the sort order
    //***   - Adjust the selection.
    //***   - Adjust a formula in the report
    //***   - Select the output destination. (Window, Printer, Disk or Mail)
    //***

    //*** Global replace
    #REPLACE ORDERBY_NUMBER 0
    #REPLACE ORDERBY_NAME   1

    //AB-StoreTopEnd

    Set Label to "Standard Customer report"
    Set Size to 231 396
    Set Location to 1 25

    //AB-DDOStart


    //AB-DDOEnd

    Object SortOrderGroup is a RadioGroup

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Label to "Sort Order"
        Set Size to 102 86
        Set Location to 10 10
        Set Current_Radio to 0
        Object NumberSortRadio is a Radio
            Set Label to "Sort by Number"
            Set Size to 10 65
            Set Location to 12 10
        End_Object    // NumberSortRadio

        Object NameSortRadio is a Radio
            Set Label to "Sort by Name"
            Set Size to 10 59
            Set Location to 24 10
        End_Object    // NameSortRadio

        Object DescAscCheckBox is a CheckBox
            Set Label to "Descending"
            Set Size to 10 55
            Set Location to 82 10
        End_Object    // DescAscCheckBox


        //AB-StoreStart

        //***
        //*** Procedure: Notify_Select_state
        //*** Purpose  : Augemented to setup the output destination of the WinQL
        //***            report. The procedure is sent when the user changes the
        //***            selection.
        //***

        Procedure Notify_Select_State  Integer iNewItem  Integer iOldItem
            Forward Send Notify_Select_State  iNewItem  iOldItem

            //*** Dynamically shadow the boundary groups
            Send AdjustBoundaryShadow iNewItem
        End_Procedure


        //***
        //*** Function:ReportSort
        //*** Purpose : Returns the sort orde selected by the user
        //***

        Function ReportSort Returns Integer
            Local Integer SelOrder

            If (Select_state(NumberSortRadio(Current_object), 0)) ;
                Move ORDERBY_NUMBER To SelOrder
            Else ;
                Move ORDERBY_NAME To SelOrder

            Function_return SelOrder
        End_function // ReportSort


        //***
        //*** Function: DescAsc
        //*** Purpose : Returns if the sort order is descending or ascending
        //***

        Function DescAsc Returns Integer
            If (Select_state(DescAscCheckBox(Current_object), 0)) ;
                Function_return PE_SF_DESCENDING
            Else ;
                Function_return PE_SF_ASCENDING
        End_function // DescAsc

        //AB-StoreEnd

    End_Object    // SortOrderGroup

    Object NumberSelGroup is a Group

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Label to "Number Criteria"
        Set Size to 49 275
        Set Location to 10 101
        Object StartCustNumber is a Form

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "Start reporting at number:"
            Set Label_Col_Offset to 2
            Set Label_Justification_Mode to jMode_Right
            Set Prompt_Button_Mode to pb_PromptOn
            Set Size to 13 85
            Set Location to 10 92

            //AB-StoreStart
            Set Form_Datatype Item 0 To 0

            //****************************************************************************
            //*** The following code connects the customer selection list to this form ***
            //****************************************************************************
            Set Prompt_Object to (Customer_sl(Current_object))

            // this is called by the prompt list upon initialization. This will let us
            // set special properties for the list's one time use. In this case we
            // want the intial column and the export column to be name (col 1)
            Procedure Prompt_Callback integer hPrompt
                set Export_Column of hPrompt to 0
                Set Initial_Column of hPrompt to 0
            end_procedure

            //AB-StoreEnd

        End_Object    // StartCustNumber

        Object EndCustNumber is a Form

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "Stop reporting at number:"
            Set Label_Col_Offset to 2
            Set Label_Justification_Mode to jMode_Right
            Set Prompt_Button_Mode to pb_PromptOn
            Set Size to 13 85
            Set Location to 25 92

            //AB-StoreStart
            Set Form_DataType Item 0 To 0

            //****************************************************************************
            //*** The following code connects the customer selection list to this form ***
            //****************************************************************************
            Set Prompt_Object to (Customer_sl(Current_object))

            // this is called by the prompt list upon initialization. This will let us
            // set special properties for the list's one time use. In this case we
            // want the intial column and the export column to be name (col 1)
            Procedure Prompt_Callback integer hPrompt
                set Export_Column of hPrompt to 0
                Set Initial_Column of hPrompt to 0
            end_procedure

            //AB-StoreEnd

        End_Object    // EndCustNumber


        //AB-StoreStart


        //***
        //*** Function: StartNumber
        //*** Purpose : The start customer number
        //***

        Function StartNumber Returns Integer
            Function_return (Value(StartCustNumber(Current_object), 0))
        End_function // StartNumber


        //***
        //*** Function: EndNumber
        //*** Purpose : The end customer number
        //***

        Function EndNumber Returns Integer
            Function_return (Value(EndCustNumber(Current_object), 0))
        End_function // StartNumber

        //AB-StoreEnd

    End_Object    // NumberSelGroup

    Object NameSelGroup is a Group

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Label to "Name Criteria"
        Set Size to 49 275
        Set Location to 63 101
        Object StartCustName is a Form

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "Start reporting at customer:"
            Set Label_Col_Offset to 2
            Set Label_Justification_Mode to jMode_Right
            Set Prompt_Button_Mode to pb_PromptOn
            Set Size to 13 178
            Set Location to 10 92

            //AB-StoreStart

            //****************************************************************************
            //*** The following code connects the customer selection list to this form ***
            //****************************************************************************
            Set Prompt_Object to (Customer_sl(Current_object))

            // this is called by the prompt list upon initialization. This will let us
            // set special properties for the list's one time use. In this case we
            // want the intial column and the export column to be name (col 1)
            Procedure Prompt_Callback integer hPrompt
                set Export_Column of hPrompt to 1
                Set Initial_Column of hPrompt to 1
            end_procedure
            //AB-StoreEnd

        End_Object    // StartCustName

        Object EndCustName is a Form

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "End reporting at customer:"
            Set Label_Col_Offset to 2
            Set Label_Justification_Mode to jMode_Right
            Set Prompt_Button_Mode to pb_PromptOn
            Set Size to 13 178
            Set Location to 25 92

            //AB-StoreStart

            //****************************************************************************
            //*** The following code connects the customer selection list to this form ***
            //****************************************************************************
            Set Prompt_Object to (Customer_sl(Current_object))

            // this is called by the prompt list upon initialization. This will let us
            // set special properties for the list's one time use. In this case we
            // want the intial column and the export column to be name (col 1)
            Procedure Prompt_Callback integer hPrompt
                set Export_Column of hPrompt to 1
                Set Initial_Column of hPrompt to 1
            end_procedure


            //AB-StoreEnd

        End_Object    // EndCustName


        //AB-StoreStart


        //***
        //*** Function: StartCustomer
        //*** Purpose : The start customer name
        //***

        Function StartCustomer Returns String
            Function_return (Value(StartCustName(Current_object), 0))
        End_function // StartCustomer



        //***
        //*** Function: EndCustomer
        //*** Purpose : The end customer name
        //***

        Function EndCustomer Returns String
            Function_return (Value(EndCustName(Current_object), 0))
        End_function // StartCustomer

        //AB-StoreEnd

    End_Object    // NameSelGroup

    Object DestRadio is a RadioGroup

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Label to "Output destination"
        Set Size to 74 86
        Set Location to 116 10
        Set Current_Radio to 0
        Object WindowRadio is a Radio
            Set Label to "Print to Window"
            Set Size to 10 67
            Set Location to 12 10
        End_Object    // WindowRadio

        Object PrinterRadio is a Radio
            Set Label to "Print to Printer"
            Set Size to 10 61
            Set Location to 26 10
        End_Object    // PrinterRadio

        Object FileRadio is a Radio
            Set Label to "Export to File"
            Set Size to 10 57
            Set Location to 40 10
        End_Object    // FileRadio

        Object MailRadio is a Radio
            Set Label to "Export to Mail"
            Set Size to 10 59
            Set Location to 54 10
        End_Object    // MailRadio


        //AB-StoreStart

        //***
        //*** Procedure: Notify_Select_state
        //*** Purpose  : Augemented to setup the output destination of the WinQL
        //***            report. The procedure is sent when the user changes the
        //***            selection.
        //***

        Procedure Notify_Select_State  Integer iNewItem  Integer iOldItem
            Forward Send Notify_Select_State  iNewItem  iOldItem
            If iNewItem Eq 0 ;
                Set Output_Device_Mode To WQL_PRINT_TO_WINDOW
            Else If iNewItem Eq 1;
                Set Output_Device_Mode To WQL_PRINT_TO_PRINTER
            Else If iNewItem Eq 2 ;
                Set Output_Device_Mode To WQL_PRINT_TO_FILE
            Else If iNewItem Eq 3 ;
                Set Output_Device_Mode To WQL_PRINT_TO_MAPI

            Send AdjustFileTypeShadow (iNewItem < 2)
        End_Procedure

        //AB-StoreEnd

    End_Object    // DestRadio

    Object FileTypeGroup is a Group

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Label to "Export  File Settings"
        Set Size to 74 275
        Set Location to 116 100
        Object FileNameForm is a Form

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "File Name:"
            Set Label_Col_Offset to 2
            Set Label_Justification_Mode to jMode_Right
            Set Prompt_Button_Mode to pb_PromptOn
            Set Size to 13 131
            Set Location to 10 48

            //AB-StoreStart
            //*** Default item value
            Set Value item 0 to "Custlst.doc"

            //***
            //*** Procedure: prompt
            //*** Purpose  : Send when the prompt key is pressed, start selection list
            //***

            Procedure Prompt
                Local String  SelectedFile
                Local String  Extension
                Local String  Filter
                Local Integer Type
                Local Integer Selected

                //*** Setup initial file name
                Get Value Item 0 To SelectedFile
                If SelectedFile Eq "" Begin
                    Get WQLFileExt To Extension
                    Move ("Custlst" + Extension) To SelectedFile
                End

                //*** Create a filter for the save as dialog
                Move "" To Filter
                Get WQLFileTYpe To Type
                If Type Eq WQL_WordWinType ;
                    Append Filter "Word for Windows (*.doc)|*.doc"
                If ((Type Eq WQL_Xls2Type) Or (Type Eq WQL_Xls3Type) Or (Type Eq WQL_Xls4Type) Or (Type Eq WQL_Xls5Type)) ;
                    Append Filter "Excel (*.xls)|*.xls"
                If Type Eq WQL_RichTextFormatType ;
                    Append Filter "Rich Text (*.rtf)|*.rtf"
                If Type Eq WQL_TextType ;
                    Append Filter "Text (*.txt)|*.txt"
                If Type Eq WQL_RecordType ;
                    Append Filter "Record Style (*.rec)|*.rec"
                If Type Eq WQL_CommaSeparatedType ;
                    Append Filter "Comma Separated Values (*.csv)|*.csv"
                If Type Eq WQL_DIFType ;
                    Append Filter "Data Interchange Format (*.dif)|*.dif"
                Append Filter "|All Files|*.*"

                //*** Create a save as dialog
                Object New_dialog Is A SaveAsdialog
                    //*** Setup title
                    Set Dialog_Caption        To "Customer report export to disk, give file name"
                    Set Filter_String         To Filter
                    Set Hidereadonly_State    To True
                    Set Overwriteprompt_State To True
                    Set Showfiletitle_State   To True
                    Set File_Title            To SelectedFile
                End_object // New_dialog

                //*** Start the save as dialog
                Get Show_Dialog Of (New_dialog(Current_object)) To Selected
                If Selected Begin
                    Get File_Name Of (New_Dialog(Current_object)) To SelectedFile
                    Set Value Item 0 To SelectedFile
                End

                //*** Destroy the save as dialog
                Send Request_Destroy_object To (New_dialog(Current_object))
            End_procedure // Start_Prompt

            //***
            //*** Function: FileName
            //*** Purpose : Returns the name of the file to export to
            //***

            Function FileName Returns String
                Local String  SelectedFile

                //*** Get file name
                Get Value Item 0 To SelectedFile
                If SelectedFile Eq "" ;
                    Move "Custlst.doc" To SelectedFile

                Function_return SelectedFile
            End_function // FileName

            //AB-StoreEnd

        End_Object    // FileNameForm

        Object TypeCombo is a ComboForm

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "File Type:"
            Set Label_Col_Offset to 2
            Set Label_Justification_Mode to jMode_Right
            Set Size to 13 131
            Set Location to 25 48

            //AB-StoreStart
            //*** Make sure the user picks a list item and cannot enter information
            Set Entry_state Item 0 To False

            //*** Show list unsorted. This must be done because we raly on the order of the
            //*** list to determine the type of the file. (See FileType function)
            Set Combo_Sort_State To False

            //***
            //*** Procedure: Combo_Fill_list
            //*** Purpose  : Augemebnted to fill the list with export file types.
            //***

            Procedure Combo_Fill_List
                Send Combo_Add_item "Word for Windows"
                Send Combo_Add_Item "Excel 2.1"
                Send Combo_Add_Item "Excel 3.0"
                Send Combo_Add_Item "Excel 4.0"
                Send Combo_Add_Item "Excel 5.0"
                Send Combo_Add_Item "Rich Text"
                Send Combo_Add_Item "Text"
                Send Combo_Add_Item "Record Style"
                Send Combo_Add_Item "Comma Separated"
                Send Combo_Add_Item "Data Interchage Format (DIF)"
            End_procedure // Combo_Fill_List


            //***
            //*** Function: FileType
            //*** Purpose : Type to export to
            //***

            Function FileType Returns Integer
                Local String  FileTypeName
                Local Integer FileTypeValue
                Local Integer SelectedItem

                Get Value Item 0 To FileTypeName
                Get Combo_Item_Matching FileTypeName To SelectedItem
                Move WQL_TextType To FileTypeValue
                If SelectedItem Ne -1 Begin
                    If SelectedItem Eq 0 Move WQL_WordWinType        To FileTypeValue
                    If SelectedItem Eq 1 Move WQL_Xls2Type           To FileTypeValue
                    If SelectedItem Eq 2 Move WQL_Xls3Type           To FileTypeValue
                    If SelectedItem Eq 3 Move WQL_Xls4Type           To FileTypeValue
                    If SelectedItem Eq 4 Move WQL_Xls5Type           To FileTypeValue
                    If SelectedItem Eq 5 Move WQL_RichTextFormatType To FileTypeValue
                    If SelectedItem Eq 6 Move WQL_TextType           To FileTypeValue
                    If SelectedItem Eq 7 Move WQL_RecordType         To FileTypeValue
                    If SelectedItem Eq 8 Move WQL_CommaSeparatedType To FileTypeValue
                    If SelectedItem Eq 9 Move WQL_DIFType            To FileTypeValue
                End

                Function_return FileTypeValue
            End_function // FileType


            //***
            //*** Function: FileExt
            //*** Purpose : Extension for the type to export to
            //***

            Function FileExt Returns String
                Local String  FileTypeExt
                Local Integer FileTypeValue

                Get FileType To FileTypeValue
                If FileTypeValue Eq WQL_WordWinType        Move ".doc" To FileTypeExt
                If FileTypeValue Eq WQL_Xls2Type           Move ".xls" To FileTypeExt
                If FileTypeValue Eq WQL_Xls3Type           Move ".xls" To FileTypeExt
                If FileTypeValue Eq WQL_Xls4Type           Move ".xls" To FileTypeExt
                If FileTypeValue Eq WQL_Xls5Type           Move ".xls" To FileTypeExt
                If FileTypeValue Eq WQL_RichTextFormatType Move ".rtf" To FileTypeExt
                If FileTypeValue Eq WQL_TextType           Move ".txt" To FileTypeExt
                If FileTypeValue Eq WQL_RecordType         Move ".rec" To FileTypeExt
                If FileTypeValue Eq WQL_CommaSeparatedType Move ".csv" To FileTypeExt
                If FileTypeValue Eq WQL_DIFType            Move ".dif" To FileTypeExt

                Function_return FileTypeExt
            End_function // FileExt



            //***
            //*** Procedure: OnCloseUp
            //*** Purpose  : Augemented to auto,matically change the extension of the
            //***            filename
            //***

            Procedure OnChange
                Local String  OldName
                Local String  Extension
                Local Integer ChangeExt

                Get ChangeExtension To ChangeExt
                If ChangeExt Begin
                    Get WQLFileName To OldName
                    Get FileExt To Extension
                    Set WQLFileName To (Left(OldName, (Pos(".", Oldname) - 1)) + Extension)
                End
            End_procedure // OnChange

            //AB-StoreEnd

        End_Object    // TypeCombo

        Object ApplyExtCheckBox is a CheckBox

            //AB-StoreTopStart

            //AB-StoreTopEnd

            Set Label to "Apply combo extension"
            Set Size to 10 89
            Set Location to 40 48

            //AB-StoreStart
            //*** Apply extensions by default
            Set Select_state Item 0 To True
            //AB-StoreEnd

        End_Object    // ApplyExtCheckBox


        //AB-StoreStart


        //***
        //*** Function: WQLFIleName
        //*** Purpose : The name of the file to export to
        //***

        Function WQLFileName Returns String
            Function_return (FileName(FileNameForm(Current_object)))
        End_function // WQLFIleName



        //***
        //*** Procedure Set: WQLFileName
        //*** Purpose      : Set a new filename
        //***

        Procedure Set WQLFileName String NewName
            Set Value Of (FileNameForm(Current_object)) Item 0 To NewName
        End_procedure // Set WQLFIleName


        //***
        //*** Function: WQLFIleType
        //*** Purpose : The extension type of the file to export to
        //***

        Function WQLFileType Returns Integer
            Function_return (FileType(TypeCombo(Current_object)))
        End_function // WQLFIleType


        //***
        //*** Function: WQLFIleExt
        //*** Purpose : The extension type of the file to export to
        //***

        Function WQLFileExt Returns Integer
            Function_return (FileExt(TypeCombo(Current_object)))
        End_function // WQLFIleExt



        //***
        //*** Function: ChangeExtension
        //*** Purpose : Must extension be dynamically updated?
        //***

        Function ChangeExtension Returns Integer
            Function_return (Select_state(ApplyExtCheckBox(Current_object), 0))
        End_function // ChangeExtension

        //AB-StoreEnd

    End_Object    // FileTypeGroup

    Object RunButton is a Button

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Default_State to TRUE
        Set Label to "Run Report"
        Set Size to 14 51
        Set Location to 194 271

        //AB-StoreStart

        //***
        //*** Procedure: OnClick
        //*** Purpose  : Sent when the user clicks the button. Start the report.
        //***

        Procedure OnClick
            Send RunCustReport To (CustWQLReport(Current_Object))
        End_procedure // OnClick
        //AB-StoreEnd

    End_Object    // RunButton

    Object CancelButton is a Button

        //AB-StoreTopStart

        //AB-StoreTopEnd

        Set Label to "Cancel"
        Set Location to 194 325

        //AB-StoreStart

        //***
        //*** Procedure: OnClick
        //*** Purpose  : Sent when the user presses the button. Cancel the report.
        //***

        Procedure OnClick
            Send Request_cancel
        End_procedure // OnClick

        //AB-StoreEnd

    End_Object    // CancelButton


    //AB-StoreStart

    //***
    //*** Object : CustWQLReport
    //*** Purpose: Handles the connection to WinQL 4.5
    //***

    Object CustWQLReport Is A WinQLReport
        Property Integer ReportReady Public False

        Set Report_name    To "custlst.rpt"
        Set Report_View_id To (Parent(Current_object))


        //***
        //*** Procedure: OnStartPrinting
        //*** Purpose  : Initialize the customer report, setup according to user
        //***            selection
        //***

        Procedure OnStartPrinting
            Local String  StartCust
            Local String  EndCust
            Local String  Selection
            Local String  FileName
            Local Integer StartCustomerNumber
            Local Integer EndCustomerNumber
            Local Integer FileType
            Local Integer Destination
            Local Integer SortOrder
            Local Integer NumSortFields
            Local Integer CurSortField
            Local Integer SortDirection

            //*** Setup the selection formula
            Move "" To Selection
            Get ReportSort To SortOrder
            If SortOrder Eq ORDERBY_NAME Begin
                //*** Set a selection formula for the report.
                Get StartCustomer To StartCust
                Get EndCustomer   To EndCust

                If (Trim(StartCust)) Ne "" ;
                    Append Selection "{Customer.Name} >= " '"' (Trim(StartCust)) '"'
                If (Trim(EndCust)) Ne "" ;
                    Append Selection (If(Selection <> "", " and ", "")) "{Customer.Name} <= " '"' (Trim(EndCust)) '"'
            End
            Else Begin
                Get StartNumber To StartCustomerNumber
                Get EndNumber   To EndCustomerNumber

                If StartCustomerNumber Gt 0 ;
                    Append Selection "{Customer.Customer_number} >= " StartCustomerNumber
                If EndCustomerNumber Gt 0 ;
                    Append Selection (If(Selection <> "", " and ", "")) "{Customer.Customer_number} <= " EndCustomerNumber
            End
            Set SelectionFormula To Selection

            //*** Change the formula so the report reflects the selection. Remove
            //*** quotes from the formula.
            If Selection Eq "" ;
                Set Formula "SelTxt" To ('"' + "NONE" + '"')
            Else ;
                Set Formula "SelTxt" To ('"' + (Replaces('"', Selection, "")) + '"')

            //*** Delete old sort order
            Get NSortFields To NumSortFields
            For CurSortField From 0 To (NumSortFields - 1)
                Send DeleteNthSortField 0
            Loop

            //*** Setup new sort order
            Get DescAsc To SortDirection
            If SortOrder Eq ORDERBY_NAME ;
                Send AddSortField "{Customer.Name}" SortDirection
            Else ;
                Send AddSortField "{Customer.Customer_number}" SortDirection

            //*** Handle export to file
            Get Output_Destination To Destination
            If ((Destination Eq WQL_PRINT_TO_FILE) Or (Destination Eq WQL_PRINT_TO_MAPI)) Begin
                Get WQLFileName To FileName
                Get WQLFileType To FileType

                Set ExportFileName   To FileName
                Set ExportFormatType To FileType
            End
            //Else If Destination Eq WQL_PRINT_TO_PRINTER ;
            //    Send SelectAndSetPrinter

            //*** Setup the report if ready property
            If Destination EQ WQL_PRINT_TO_WINDOW ;
                Set ReportReady To False
            Else ;
                Set ReportReady To True
        End_procedure // OnStartPrinting


        //***
        //*** Procedure: RunCustReport
        //*** Purpose  : Run the customer report
        //***

        Procedure RunCustReport
            //*** We will be busy, change the cursor
            Send Cursor_Wait To (Cursor_Control(Current_Object))

            //*** Run the report
            Send Run_report

            //*** We are ready, change the cursor
            Send Cursor_Ready To (Cursor_Control(Current_Object))

            //*** Report you are finsihed for those seetings that do not use the
            //*** screen
            If (ReportReady(Current_object)) ;
                Send Info_box "WinQL report ready."
        End_procedure // RunCustReport

    End_object // CustWQLReport


    //***
    //*** Function: StartCustomer
    //*** Purpose : The start customer name
    //***

    Function StartCustomer Returns String
        Function_return (StartCustomer(NameSelGroup(Current_object)))
    End_function // StartCustomer



    //***
    //*** Function: EndCustomer
    //*** Purpose : The end customer name
    //***

    Function EndCustomer Returns String
        Function_return (EndCustomer(NameSelGroup(Current_object)))
    End_function // StartCustomer


    //***
    //*** Function: StartNumber
    //*** Purpose : The start customer number
    //***

    Function StartNumber Returns Integer
        Function_return (StartNumber(NumberSelGroup(Current_object)))
    End_function // StartNumber


    //***
    //*** Function: EndNumber
    //*** Purpose : The end customer number
    //***

    Function EndNumber Returns Integer
        Function_return (EndNumber(NumberSelGroup(Current_object)))
    End_function // StartNumber


    //***
    //*** Function:ReportSort
    //*** Purpose : Returns the sort orde selected by the user
    //***

    Function ReportSort Returns Integer
        Function_return (ReportSort(SortOrderGroup(Current_object)))
    End_function // ReportSort


    //***
    //*** Function: DescAsc
    //*** Purpose : Returns if the sort order is descending or ascending
    //***

    Function DescAsc Returns Integer
        Function_return (DescAsc(SortOrderGroup(Current_object)))
    End_function // DescAsc


    //***
    //*** Procedure: AdjustFileTypeShadow
    //*** Purpose  : Adjust the shadow state of the file type group
    //***

    Procedure AdjustFileTypeShadow Integer NewState
        Set Object_Shadow_State Of (FileTypeGroup(Current_Object)) To NewState
    End_procedure // AdjustFileTypeShadow


    //***
    //*** Procedure: AdjustBoundaryShadow
    //*** Purpose  : Adjust the shadow of the boundary groups
    //***

    Procedure AdjustBoundaryShadow Integer GroupNum
        Set Object_Shadow_State Of (NumberSelGroup(Current_object)) To (GroupNum <> 0)
        Set Object_Shadow_State Of (NameSelGroup(Current_object))   To (GroupNum = 0)
    End_procedure // AdjustBoundaryShadow


    //***
    //*** Function: WQLFIleName
    //*** Purpose : The name of the file to export to
    //***

    Function WQLFileName Returns String
        Function_return (WQLFileName(FileTypeGroup(Current_object)))
    End_function // WQLFIleName


    //***
    //*** Function: WQLFIleType
    //*** Purpose : The type of the file to export to
    //***

    Function WQLFileType Returns Integer
        Function_return (WQLFileType(FileTypeGroup(Current_object)))
    End_function // WQLFIleType

    //AB-StoreEnd

CD_End_Object    // StandCustWQLRpt


//AB-StoreStart

//AB-StoreEnd

//AB/ End_Object    // prj